{
	"info": {
		"name": "RBAC & JWT Testing - Docker Orchestrator",
		"description": "Complete test suite for Role-Based Access Control and JWT Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "operator_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "viewer_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_container_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Setup - Create Test Users",
			"item": [
				{
					"name": "Create Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log('✅ Admin user created');",
									"} else if (pm.response.code === 409) {",
									"    console.log('⚠️ Admin user already exists');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@test.com\",\n    \"password\": \"admin123\",\n    \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Note: You may need to manually update role to 'admin' in MongoDB after registration"
					}
				},
				{
					"name": "Create Operator User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"operator@test.com\",\n    \"password\": \"operator123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Create Viewer User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"viewer@test.com\",\n    \"password\": \"viewer123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						}
					}
				}
			]
		},
		{
			"name": "2. JWT Authentication Tests",
			"item": [
				{
					"name": "Login as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains token', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('user');",
									"});",
									"",
									"pm.test('User has admin role', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql('admin');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('admin_token', jsonData.token);",
									"    console.log('✅ Admin token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@test.com\",\n    \"password\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Login as Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('operator_token', jsonData.token);",
									"    console.log('✅ Operator token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"operator@test.com\",\n    \"password\": \"operator123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Login as Viewer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('viewer_token', jsonData.token);",
									"    console.log('✅ Viewer token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"viewer@test.com\",\n    \"password\": \"viewer123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Login with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401 Unauthorized', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Error message returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@test.com\",\n    \"password\": \"wrongpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					}
				},
				{
					"name": "Access with No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test('Error indicates no token', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.message).to.include('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers",
							"host": ["{{base_url}}"],
							"path": ["api", "containers"]
						}
					}
				},
				{
					"name": "Access with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test('Error indicates invalid token', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.message).to.include('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid.jwt.token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers",
							"host": ["{{base_url}}"],
							"path": ["api", "containers"]
						}
					}
				}
			]
		},
		{
			"name": "3. Admin Role Tests",
			"item": [
				{
					"name": "Admin - Get All Containers ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Admin can view containers', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.containers && jsonData.containers.length > 0) {",
									"        pm.collectionVariables.set('test_container_id', jsonData.containers[0].containerId);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers",
							"host": ["{{base_url}}"],
							"path": ["api", "containers"]
						}
					}
				},
				{
					"name": "Admin - Start Container ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Admin can start containers', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 304, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}/start",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}", "start"]
						}
					}
				},
				{
					"name": "Admin - Get All Users ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Admin can view all users', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains users array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('users');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/users",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "users"]
						}
					}
				},
				{
					"name": "Admin - Add New User ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Admin can create users', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"newuser@test.com\",\n    \"password\": \"password123\",\n    \"role\": \"viewer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/add-user",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "add-user"]
						}
					}
				},
				{
					"name": "Admin - Sync Containers ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Admin can sync containers', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/sync",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "sync"]
						}
					}
				}
			]
		},
		{
			"name": "4. Operator Role Tests",
			"item": [
				{
					"name": "Operator - Get All Containers ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Operator can view containers', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers",
							"host": ["{{base_url}}"],
							"path": ["api", "containers"]
						}
					}
				},
				{
					"name": "Operator - Start Container ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Operator can start containers', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 304, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}/start",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}", "start"]
						}
					}
				},
				{
					"name": "Operator - Stop Container ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Operator can stop containers', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 304, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}/stop",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}", "stop"]
						}
					}
				},
				{
					"name": "Operator - Get All Users ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Operator CANNOT view users', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Forbidden error returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.message).to.include('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/users",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "users"]
						}
					}
				},
				{
					"name": "Operator - Add User ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Operator CANNOT create users', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"unauthorized@test.com\",\n    \"password\": \"password123\",\n    \"role\": \"viewer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/add-user",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "add-user"]
						}
					}
				},
				{
					"name": "Operator - Sync Containers ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Operator CANNOT sync containers', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/sync",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "sync"]
						}
					}
				}
			]
		},
		{
			"name": "5. Viewer Role Tests",
			"item": [
				{
					"name": "Viewer - Get All Containers ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Viewer can view containers', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{viewer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers",
							"host": ["{{base_url}}"],
							"path": ["api", "containers"]
						}
					}
				},
				{
					"name": "Viewer - Get Container Logs ✅",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Viewer can view logs', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{viewer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}/logs",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}", "logs"]
						}
					}
				},
				{
					"name": "Viewer - Start Container ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Viewer CANNOT start containers', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Forbidden error returned', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.message).to.include('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{viewer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}/start",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}", "start"]
						}
					}
				},
				{
					"name": "Viewer - Stop Container ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Viewer CANNOT stop containers', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{viewer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}/stop",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}", "stop"]
						}
					}
				},
				{
					"name": "Viewer - Delete Container ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Viewer CANNOT delete containers', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{viewer_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/containers/{{test_container_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "containers", "{{test_container_id}}"]
						}
					}
				},
				{
					"name": "Viewer - Get All Users ❌ (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('❌ Viewer CANNOT view users', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{viewer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/users",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "users"]
						}
					}
				}
			]
		}
	]
}


