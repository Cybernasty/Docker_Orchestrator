version: "3.8"

services:
  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend1
      - backend2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 1
  backend1:
    build:
      context: ./backend_orchestrator
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/containersDB
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - DOCKER_HOST=${DOCKER_HOST:-unix:///var/run/docker.sock}
      - INSTANCE_ID=backend1
      - HTTPS_ENABLED=${HTTPS_ENABLED:-false}
      - HTTPS_PORT=5443
      - SSL_CERT_PATH=/etc/ssl/certs/server.crt
      - SSL_KEY_PATH=/etc/ssl/private/server.key
      - SSL_CA_PATH=/etc/ssl/certs/ca.crt
      - SSL_PASSPHRASE=${SSL_PASSPHRASE:-}
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./ssl:/etc/ssl:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Instance 2
  backend2:
    build:
      context: ./backend_orchestrator
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/containersDB
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - DOCKER_HOST=${DOCKER_HOST:-unix:///var/run/docker.sock}
      - INSTANCE_ID=backend2
      - HTTPS_ENABLED=${HTTPS_ENABLED:-false}
      - HTTPS_PORT=5443
      - SSL_CERT_PATH=/etc/ssl/certs/server.crt
      - SSL_KEY_PATH=/etc/ssl/private/server.key
      - SSL_CA_PATH=/etc/ssl/certs/ca.crt
      - SSL_PASSPHRASE=${SSL_PASSPHRASE:-}
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./ssl:/etc/ssl:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Single instance with load balancer)
  frontend:
    build:
      context: ./frontend_orchestrator
      dockerfile: Dockerfile
      target: production
    depends_on:
      - nginx
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB with Replica Set for HA
  mongo:
    image: mongo:7.0
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongo/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "rs.status().ok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongo-data:
    driver: local 