stages:
  - test
  - build
  - deploy
  - security

variables:
  REGISTRY: $CI_REGISTRY
  FRONTEND_IMAGE: orchestrator-frontend
  BACKEND_IMAGE: orchestrator-backend
  NAMESPACE: orchestrator
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache dependencies between jobs
cache:
  paths:
    - backend_orchestrator/node_modules/
    - frontend_orchestrator/node_modules/

# Test Backend
test-backend:
  stage: test
  image: node:18-alpine
  script:
    - cd backend_orchestrator
    - npm ci
    - npm run lint || echo "Linting not configured"
    - npm test || echo "Tests not configured"
  artifacts:
    reports:
      junit: backend_orchestrator/test-results.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Test Frontend
test-frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend_orchestrator
    - npm ci
    - npm run lint || echo "Linting not configured"
    - npm test || echo "Tests not configured"
  artifacts:
    reports:
      junit: frontend_orchestrator/test-results.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build Backend Image
build-backend:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/$BACKEND_IMAGE:$CI_COMMIT_SHA ./backend_orchestrator
    - docker build -t $CI_REGISTRY_IMAGE/$BACKEND_IMAGE:latest ./backend_orchestrator
    - docker push $CI_REGISTRY_IMAGE/$BACKEND_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$BACKEND_IMAGE:latest
  only:
    - main
    - develop

# Build Frontend Image
build-frontend:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:$CI_COMMIT_SHA ./frontend_orchestrator
    - docker build -t $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:latest ./frontend_orchestrator
    - docker push $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:latest
  only:
    - main
    - develop

# Deploy to Kubernetes
deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=kubeconfig.yaml
    
    # Apply Kubernetes manifests
    - kubectl apply -f k8s/namespace.yaml
    - kubectl apply -f k8s/configmap.yaml
    - kubectl apply -f k8s/secrets.yaml
    
    # Update deployment images
    - kubectl set image deployment/frontend-orchestrator frontend=$CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:$CI_COMMIT_SHA -n $NAMESPACE
    - kubectl set image statefulset/backend-orchestrator backend=$CI_REGISTRY_IMAGE/$BACKEND_IMAGE:$CI_COMMIT_SHA -n $NAMESPACE
    
    # Wait for rollout
    - kubectl rollout status deployment/frontend-orchestrator -n $NAMESPACE
    - kubectl rollout status statefulset/backend-orchestrator -n $NAMESPACE
    
    # Health check
    - kubectl wait --for=condition=ready pod -l app=frontend-orchestrator -n $NAMESPACE --timeout=300s
    - kubectl wait --for=condition=ready pod -l app=backend-orchestrator -n $NAMESPACE --timeout=300s
    - kubectl get pods -n $NAMESPACE
    - kubectl get services -n $NAMESPACE
  environment:
    name: production
    url: https://orchestrator.local
  only:
    - main

# Security Scan
security-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --format table --output security-report.txt .
    - cat security-report.txt
  artifacts:
    paths:
      - security-report.txt
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Container Security Scan
container-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy image --format table --output container-security-report.txt $CI_REGISTRY_IMAGE/$BACKEND_IMAGE:$CI_COMMIT_SHA
    - trivy image --format table --output container-security-report-frontend.txt $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:$CI_COMMIT_SHA
    - echo "Backend Security Report:"
    - cat container-security-report.txt
    - echo "Frontend Security Report:"
    - cat container-security-report-frontend.txt
  artifacts:
    paths:
      - container-security-report.txt
      - container-security-report-frontend.txt
    expire_in: 1 week
  only:
    - main
    - develop 