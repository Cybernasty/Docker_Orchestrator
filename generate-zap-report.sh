#!/bin/bash

# ============================================================================
# OWASP ZAP Report Generator
# ============================================================================
# This script runs a ZAP scan and generates a formatted report
# ============================================================================

set -e

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
TARGET_URL="${1:-http://frontend-orchestrator.orchestrator.svc.cluster.local}"
OUTPUT_DIR="${2:-./zap-reports}"

echo -e "${BLUE}🔒 OWASP ZAP Security Scanner${NC}"
echo "================================"
echo "Target: $TARGET_URL"
echo "Output: $OUTPUT_DIR"
echo ""

# Get ZAP pod
ZAP_POD=$(kubectl get pod -n zap -l app=zap -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

if [ -z "$ZAP_POD" ]; then
    echo -e "${RED}❌ ZAP pod not found. Deploy ZAP first:${NC}"
    echo "   kubectl apply -f k8s/zap-optimized.yaml"
    exit 1
fi

echo -e "${GREEN}✅ ZAP Pod: $ZAP_POD${NC}"

# Check target is accessible
echo -e "${BLUE}🔍 Checking target accessibility...${NC}"
HTTP_CODE=$(kubectl exec -n zap $ZAP_POD -- curl -s -o /dev/null -w "%{http_code}" $TARGET_URL || echo "000")

if [ "$HTTP_CODE" = "000" ]; then
    echo -e "${RED}❌ Target not accessible from ZAP pod${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Target accessible (HTTP $HTTP_CODE)${NC}"
echo ""

# Create output directory
mkdir -p $OUTPUT_DIR

# Run ZAP baseline scan
echo -e "${BLUE}🚀 Running ZAP baseline scan (this may take 2-5 minutes)...${NC}"
echo ""

kubectl exec -n zap $ZAP_POD -- zap-baseline.py \
    -t $TARGET_URL \
    -I -d 2>&1 | tee $OUTPUT_DIR/zap-scan-output.txt

echo ""
echo -e "${GREEN}✅ Scan completed!${NC}"
echo ""

# Parse output for summary
echo -e "${BLUE}📊 Generating Summary...${NC}"

CRITICAL=$(grep -c "FAIL-NEW: 0" $OUTPUT_DIR/zap-scan-output.txt 2>/dev/null || echo "0")
HIGH=$(grep -c "FAIL-NEW: 1" $OUTPUT_DIR/zap-scan-output.txt 2>/dev/null || echo "0")
MEDIUM=$(grep -c "FAIL-NEW: 2" $OUTPUT_DIR/zap-scan-output.txt 2>/dev/null || echo "0")
LOW=$(grep -c "FAIL-NEW: 3" $OUTPUT_DIR/zap-scan-output.txt 2>/dev/null || echo "0")
WARNINGS=$(grep -c "WARN-NEW" $OUTPUT_DIR/zap-scan-output.txt 2>/dev/null || echo "0")

# Create summary report
cat > $OUTPUT_DIR/summary.md << EOF
# 🔒 OWASP ZAP Security Scan Report

**Target:** \`$TARGET_URL\`  
**Date:** $(date)  
**ZAP Pod:** \`$ZAP_POD\`

## 📊 Summary

| Severity | Count |
|----------|-------|
| 🔴 Critical | $CRITICAL |
| 🟠 High | $HIGH |
| 🟡 Medium | $MEDIUM |
| 🟢 Low | $LOW |
| ⚠️  Warnings | $WARNINGS |

## 📋 Scan Details

Full scan output available in: \`zap-scan-output.txt\`

## 🎯 Next Steps

1. Review findings in the scan output
2. Fix critical and high severity issues
3. Update security headers
4. Re-run scan to verify fixes

---

*Generated by OWASP ZAP Baseline Scanner*
EOF

echo ""
echo -e "${GREEN}✅ Reports generated in: $OUTPUT_DIR${NC}"
echo ""
echo "Files created:"
echo "  - zap-scan-output.txt (full scan output)"
echo "  - summary.md (summary report)"
echo ""
echo -e "${BLUE}📊 Quick Summary:${NC}"
echo "  Critical: $CRITICAL"
echo "  High: $HIGH"
echo "  Medium: $MEDIUM"
echo "  Low: $LOW"
echo "  Warnings: $WARNINGS"
echo ""

# View summary
cat $OUTPUT_DIR/summary.md

