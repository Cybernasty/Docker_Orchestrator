name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: orchestrator-frontend
  BACKEND_IMAGE: orchestrator-backend
  NAMESPACE: orchestrator

jobs:
  # Lint and Test Backend
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend_orchestrator/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend_orchestrator
        run: npm ci

      - name: Run backend linting
        working-directory: ./backend_orchestrator
        run: npm run lint || echo "Linting not configured"

      - name: Run backend tests
        working-directory: ./backend_orchestrator
        run: npm test || echo "Tests not configured"

  # Lint and Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend_orchestrator/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend_orchestrator
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend_orchestrator
        run: npm run lint || echo "Linting not configured"

      - name: Run frontend tests
        working-directory: ./frontend_orchestrator
        run: npm test || echo "Tests not configured"

  # Build and Push Images
  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend_orchestrator
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend_orchestrator
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Kubernetes
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Kubernetes
        run: |
          # Update image tags in Kubernetes manifests
          export BACKEND_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
          export FRONTEND_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          
          # Update deployment images
          kubectl set image deployment/frontend-orchestrator frontend=$FRONTEND_TAG -n $NAMESPACE
          kubectl set image statefulset/backend-orchestrator backend=$BACKEND_TAG -n $NAMESPACE
          
          # Wait for rollout
          kubectl rollout status deployment/frontend-orchestrator -n $NAMESPACE
          kubectl rollout status statefulset/backend-orchestrator -n $NAMESPACE

      - name: Health check
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=frontend-orchestrator -n $NAMESPACE --timeout=300s
          kubectl wait --for=condition=ready pod -l app=backend-orchestrator -n $NAMESPACE --timeout=300s
          
          # Basic health check
          kubectl get pods -n $NAMESPACE
          kubectl get services -n $NAMESPACE

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 