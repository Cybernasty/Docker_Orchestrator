name: 🔒 Integrated DevSecOps Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_HUB_USERNAME: cybermonta
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: orchestrator-backend
  FRONTEND_IMAGE: orchestrator-frontend
  NAMESPACE: orchestrator
  ARGOCD_APP_NAME: orchestrator-app

jobs:
  # ==================================================================================
  # PHASE 1: CODE QUALITY & SECURITY ANALYSIS
  # ==================================================================================
  
  code-quality:
    name: 📊 SonarQube Code Quality Analysis
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full clone for better analysis
        
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true
        
      - name: Generate Quality Report
        if: always()
        run: |
          echo "### 📊 SonarQube Quality Analysis" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code quality analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "🔗 View detailed report at: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️  **Note**: Quality Gate results are informational only and don't block the pipeline" >> $GITHUB_STEP_SUMMARY

  filesystem-security-scan:
    name: 🔍 Trivy Filesystem Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-filesystem.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: false
          
      - name: Upload Trivy filesystem results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-filesystem.sarif'
          category: 'filesystem'
          
      - name: Generate Filesystem Security Report
        if: always()
        run: |
          echo "### 🔍 Filesystem Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "✅ Trivy filesystem scan completed" >> $GITHUB_STEP_SUMMARY
          echo "📊 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY

  # ==================================================================================
  # PHASE 2: BUILD & CONTAINER SECURITY
  # ==================================================================================
  
  build-and-scan-images:
    name: 🐳 Build & Scan Docker Images
    needs: [code-quality, filesystem-security-scan]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      backend_image: ${{ steps.image_tags.outputs.backend_image }}
      frontend_image: ${{ steps.image_tags.outputs.frontend_image }}
      image_tag: ${{ steps.image_tags.outputs.image_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Generate image tags
        id: image_tags
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${{ github.ref_name }}-${SHORT_SHA}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "backend_image=${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "📦 Image Tag: ${IMAGE_TAG}" >> $GITHUB_STEP_SUMMARY
          
      - name: Build backend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }} ./backend_orchestrator
          docker tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }} ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
          
      - name: Build frontend image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }} ./frontend_orchestrator
          docker tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }} ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
          
      - name: Run Trivy scan on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-backend.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Run Trivy scan on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-frontend.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy backend scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend.sarif'
          category: 'backend-image'
          
      - name: Upload Trivy frontend scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend.sarif'
          category: 'frontend-image'
          
      - name: Check for critical vulnerabilities
        run: |
          echo "### 🔒 Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Check backend
          if grep -q '"level":"error"' trivy-backend.sarif 2>/dev/null; then
            echo "❌ **Backend Image**: Critical vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            echo "⚠️  Review required before deployment" >> $GITHUB_STEP_SUMMARY
            BACKEND_CRITICAL=true
          else
            echo "✅ **Backend Image**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
            BACKEND_CRITICAL=false
          fi
          
          # Check frontend
          if grep -q '"level":"error"' trivy-frontend.sarif 2>/dev/null; then
            echo "❌ **Frontend Image**: Critical vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            echo "⚠️  Review required before deployment" >> $GITHUB_STEP_SUMMARY
            FRONTEND_CRITICAL=true
          else
            echo "✅ **Frontend Image**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
            FRONTEND_CRITICAL=false
          fi
          
          # For main branch, fail on critical vulnerabilities
          if [ "${{ github.ref }}" == "refs/heads/main" ] && ( [ "$BACKEND_CRITICAL" == "true" ] || [ "$FRONTEND_CRITICAL" == "true" ] ); then
            echo "🚫 Deployment blocked due to critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Push secure images to Docker Hub
        run: |
          echo "🚀 Pushing images to Docker Hub..."
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ steps.image_tags.outputs.image_tag }}
          docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
          echo "✅ Images pushed successfully!" >> $GITHUB_STEP_SUMMARY

  # ==================================================================================
  # PHASE 3: UPDATE MANIFESTS FOR GITOPS
  # ==================================================================================
  
  update-manifests:
    name: 📝 Update Kubernetes Manifests
    needs: build-and-scan-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update image tags in manifests
        run: |
          IMAGE_TAG="${{ needs.build-and-scan-images.outputs.image_tag }}"
          
          # Update backend deployment
          sed -i "s|image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:.*|image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${IMAGE_TAG}|g" k8s/backend-deployment.yaml
          
          # Update frontend deployment
          sed -i "s|image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:.*|image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${IMAGE_TAG}|g" k8s/frontend-deployment.yaml
          
          echo "✅ Manifests updated with tag: ${IMAGE_TAG}" >> $GITHUB_STEP_SUMMARY
          
      - name: Commit and push manifest changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add k8s/backend-deployment.yaml k8s/frontend-deployment.yaml
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "ℹ️  No manifest changes required" >> $GITHUB_STEP_SUMMARY
          else
            git commit -m "🚀 Update image tags to ${{ needs.build-and-scan-images.outputs.image_tag }} [skip ci]"
            
            # Pull and rebase before pushing to handle concurrent updates
            git pull --rebase origin main || true
            
            # Push with retry logic
            for i in {1..3}; do
              if git push origin main; then
                echo "✅ Manifests committed and pushed" >> $GITHUB_STEP_SUMMARY
                break
              else
                echo "⚠️ Push failed, retrying ($i/3)..."
                git pull --rebase origin main || true
                sleep 2
              fi
            done
          fi

  # ==================================================================================
  # PHASE 4: GITOPS DEPLOYMENT (ArgoCD Auto-Sync)
  # ==================================================================================
  
  wait-for-argocd:
    name: 🚀 GitOps Deployment (ArgoCD)
    needs: [update-manifests]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: ArgoCD Auto-Sync Info
        run: |
          echo "### 🎯 GitOps Deployment with ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ArgoCD will automatically detect the manifest changes and deploy:" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️  Detection time: ~3 minutes (default polling interval)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Auto-sync: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Self-heal: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- 🧹 Prune: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Monitor deployment at: https://${{ secrets.ARGOCD_SERVER }}/applications/orchestrator-app" >> $GITHUB_STEP_SUMMARY
          
      - name: Wait for ArgoCD detection
        run: |
          echo "⏳ Waiting 30 seconds for ArgoCD to detect changes..."
          sleep 30
          echo "✅ ArgoCD should be syncing now" >> $GITHUB_STEP_SUMMARY
          
      - name: Verify deployment (optional)
        run: |
          echo "### 🔍 Current Deployment Status" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.NAMESPACE }} >> $GITHUB_STEP_SUMMARY || echo "Namespace not ready yet" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 Check ArgoCD UI for real-time deployment status" >> $GITHUB_STEP_SUMMARY

  # ==================================================================================
  # PHASE 5: POST-DEPLOYMENT VERIFICATION
  # ==================================================================================
  
  post-deployment-scan:
    name: 🔍 Post-Deployment Security Verification
    needs: wait-for-argocd
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Verify running containers
        run: |
          echo "### 🔒 Post-Deployment Security Check" >> $GITHUB_STEP_SUMMARY
          
          # Get running image versions
          BACKEND_IMAGE=$(kubectl get statefulset backend-orchestrator -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
          FRONTEND_IMAGE=$(kubectl get deployment frontend-orchestrator -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
          
          echo "**Backend Image**: \`${BACKEND_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Image**: \`${FRONTEND_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
          
      - name: Check pod security
        run: |
          # Check for any security-related issues in pods
          kubectl get pods -n ${{ env.NAMESPACE }} -o json | jq -r '.items[] | select(.status.phase=="Running") | .metadata.name' | while read pod; do
            echo "📦 Pod: $pod" >> $GITHUB_STEP_SUMMARY
          done

  # ==================================================================================
  # PHASE 6: OWASP ZAP SECURITY SCAN
  # ==================================================================================
  
  zap-security-scan:
    name: 🔒 OWASP ZAP Security Scan
    needs: wait-for-argocd
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    
    steps:
      - name: Deploy OWASP ZAP (if not running)
        run: |
          if ! kubectl get namespace zap &> /dev/null; then
            echo "Deploying ZAP..."
            kubectl apply -f k8s/zap-optimized.yaml
            kubectl wait --for=condition=Ready pod -l app=zap -n zap --timeout=120s || echo "ZAP deployment timeout"
          else
            echo "ZAP already deployed"
          fi
          
      - name: Wait for application to be ready
        run: |
          echo "⏳ Waiting for application to stabilize..."
          sleep 60
          
      - name: Run OWASP ZAP Security Scan
        run: |
          ZAP_POD=$(kubectl get pod -n zap -l app=zap -o jsonpath='{.items[0].metadata.name}')
          
          if [ -z "$ZAP_POD" ]; then
            echo "⚠️  ZAP pod not found, skipping scan" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "### 🔒 OWASP ZAP Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "Target: http://frontend-orchestrator.orchestrator.svc.cluster.local" >> $GITHUB_STEP_SUMMARY
          echo "ZAP Pod: $ZAP_POD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if target is accessible
          HTTP_CODE=$(kubectl exec -n zap $ZAP_POD -- curl -s -o /dev/null -w "%{http_code}" http://frontend-orchestrator.orchestrator.svc.cluster.local || echo "000")
          echo "✅ Target HTTP Response: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
          
          if [ "$HTTP_CODE" = "000" ] || [ "$HTTP_CODE" = "404" ]; then
            echo "⚠️  Target not accessible, skipping ZAP scan" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          # Start spider scan via API
          echo "🕷️ Starting spider scan..." >> $GITHUB_STEP_SUMMARY
          kubectl exec -n zap $ZAP_POD -- curl -s "http://localhost:8080/JSON/spider/action/scan/?url=http://frontend-orchestrator.orchestrator.svc.cluster.local&maxChildren=20" > /dev/null
          
          # Wait for spider to complete
          echo "⏳ Spidering application (60 seconds)..." >> $GITHUB_STEP_SUMMARY
          sleep 60
          
          # Get spider status
          SPIDER_STATUS=$(kubectl exec -n zap $ZAP_POD -- curl -s "http://localhost:8080/JSON/spider/view/status")
          echo "Spider status: $SPIDER_STATUS" >> $GITHUB_STEP_SUMMARY
          
          # Wait a bit for passive scanning
          echo "⏳ Running passive security scans (30 seconds)..." >> $GITHUB_STEP_SUMMARY
          sleep 30
          
          # Get alerts
          echo "📊 Retrieving security findings..." >> $GITHUB_STEP_SUMMARY
          kubectl exec -n zap $ZAP_POD -- curl -s "http://localhost:8080/JSON/core/view/alerts" > zap-alerts.json
          
          # Get summary
          kubectl exec -n zap $ZAP_POD -- curl -s "http://localhost:8080/JSON/core/view/alertsSummary" > zap-summary.json
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Security Findings Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat zap-summary.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count findings by severity
          HIGH_COUNT=$(cat zap-alerts.json | grep -o '"risk":"High"' | wc -l || echo 0)
          MEDIUM_COUNT=$(cat zap-alerts.json | grep -o '"risk":"Medium"' | wc -l || echo 0)
          LOW_COUNT=$(cat zap-alerts.json | grep -o '"risk":"Low"' | wc -l || echo 0)
          INFO_COUNT=$(cat zap-alerts.json | grep -o '"risk":"Informational"' | wc -l || echo 0)
          
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 High | $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $MEDIUM_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟢 Low | $LOW_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| ℹ️ Info | $INFO_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ ZAP security scan completed" >> $GITHUB_STEP_SUMMARY
          
      - name: Generate ZAP Reports
        if: always()
        run: |
          if [ -f zap-alerts.json ]; then
            # Use the HTML report generator script
            chmod +x create-zap-html-report.sh
            ./create-zap-html-report.sh zap-alerts.json zap-report.html || echo "HTML generation skipped"
            
            # Also create simple markdown
            HIGH_COUNT=$(cat zap-alerts.json | grep -o '"risk":"High"' | wc -l || echo 0)
            MEDIUM_COUNT=$(cat zap-alerts.json | grep -o '"risk":"Medium"' | wc -l || echo 0)
            LOW_COUNT=$(cat zap-alerts.json | grep -o '"risk":"Low"' | wc -l || echo 0)
            INFO_COUNT=$(cat zap-alerts.json | grep -o '"risk":"Informational"' | wc -l || echo 0)
            
            echo "# OWASP ZAP Security Report" > zap-report.md
            echo "" >> zap-report.md
            echo "**Target:** http://frontend-orchestrator.orchestrator.svc.cluster.local" >> zap-report.md
            echo "**Date:** $(date)" >> zap-report.md
            echo "" >> zap-report.md
            echo "| Severity | Count |" >> zap-report.md
            echo "|----------|-------|" >> zap-report.md
            echo "| 🔴 High | $HIGH_COUNT |" >> zap-report.md
            echo "| 🟡 Medium | $MEDIUM_COUNT |" >> zap-report.md
            echo "| 🟢 Low | $LOW_COUNT |" >> zap-report.md
            echo "| ℹ️ Info | $INFO_COUNT |" >> zap-report.md
            
            echo "✅ HTML and Markdown reports generated" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload ZAP Reports as Artifacts
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: |
            zap-report.html
            zap-report.md
            zap-alerts.json
            zap-summary.json
          if-no-files-found: warn
          retention-days: 30

  # ==================================================================================
  # FINAL SUMMARY
  # ==================================================================================
  
  pipeline-summary:
    name: 📋 DevSecOps Pipeline Summary
    needs: [code-quality, filesystem-security-scan, build-and-scan-images, wait-for-argocd, post-deployment-scan, zap-security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate Complete Summary
        run: |
          echo "# 🔒 Complete DevSecOps Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Phase | Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | SonarQube | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Filesystem Scan | Trivy | ${{ needs.filesystem-security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Build & Scan | Docker + Trivy | ${{ needs.build-and-scan-images.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitOps Deployment | ArgoCD (Auto-Sync) | ${{ needs.wait-for-argocd.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-Deployment | Verification | ${{ needs.post-deployment-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DAST Security Scan | OWASP ZAP | ${{ needs.zap-security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🛡️ Security & Quality Tools" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Integrated Tools:" >> $GITHUB_STEP_SUMMARY
          echo "- **SonarQube**: Code quality, security hotspots, and technical debt analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy**: Filesystem and container vulnerability scanning (SAST)" >> $GITHUB_STEP_SUMMARY
          echo "- **OWASP ZAP**: Dynamic application security testing (DAST)" >> $GITHUB_STEP_SUMMARY
          echo "- **ArgoCD**: GitOps-based continuous deployment to Kubernetes" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Hub**: Secure container registry with automated builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: \`${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. 🔍 Review security scan results in the **Security** tab" >> $GITHUB_STEP_SUMMARY
          echo "2. 📊 Check code quality metrics in **SonarQube**" >> $GITHUB_STEP_SUMMARY
          echo "3. 🚀 Monitor deployment status in **ArgoCD UI**" >> $GITHUB_STEP_SUMMARY
          echo "4. 📦 Verify application health in **Kubernetes Dashboard**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🤖 *Generated by Integrated DevSecOps Pipeline*" >> $GITHUB_STEP_SUMMARY

