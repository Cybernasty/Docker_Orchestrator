# ============================================================================
# OWASP ZAP Report Generator (PowerShell)
# ============================================================================
# Usage: .\Generate-ZapReport.ps1
# ============================================================================

param(
    [string]$TargetUrl = "http://frontend-orchestrator.orchestrator.svc.cluster.local",
    [string]$OutputDir = ".\zap-reports"
)

Write-Host "🔒 OWASP ZAP Security Scanner" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan
Write-Host "Target: $TargetUrl"
Write-Host "Output: $OutputDir"
Write-Host ""

# Get ZAP pod
Write-Host "🔍 Finding ZAP pod..." -ForegroundColor Blue
$ZapPod = kubectl get pod -n zap -l app=zap -o jsonpath='{.items[0].metadata.name}' 2>$null

if ([string]::IsNullOrEmpty($ZapPod)) {
    Write-Host "❌ ZAP pod not found. Deploy ZAP first:" -ForegroundColor Red
    Write-Host "   kubectl apply -f k8s/zap-optimized.yaml" -ForegroundColor Yellow
    exit 1
}

Write-Host "✅ ZAP Pod: $ZapPod" -ForegroundColor Green

# Check target accessibility
Write-Host "🔍 Checking target accessibility..." -ForegroundColor Blue
$HttpCode = kubectl exec -n zap $ZapPod -- curl -s -o /dev/null -w "%{http_code}" $TargetUrl 2>$null

if ($HttpCode -eq "000") {
    Write-Host "❌ Target not accessible from ZAP pod" -ForegroundColor Red
    exit 1
}

Write-Host "✅ Target accessible (HTTP $HttpCode)" -ForegroundColor Green
Write-Host ""

# Create output directory
New-Item -ItemType Directory -Force -Path $OutputDir | Out-Null

# Run ZAP baseline scan
Write-Host "🚀 Running ZAP baseline scan (this may take 2-5 minutes)..." -ForegroundColor Blue
Write-Host ""

$ScanOutput = kubectl exec -n zap $ZapPod -- zap-baseline.py -t $TargetUrl -I -s 2>&1

# Save output
$ScanOutput | Out-File -FilePath "$OutputDir\zap-scan-output.txt"

# Display output
Write-Host $ScanOutput

Write-Host ""
Write-Host "✅ Scan completed!" -ForegroundColor Green
Write-Host ""

# Parse results
$Critical = ($ScanOutput | Select-String "FAIL-NEW: 0").Count
$High = ($ScanOutput | Select-String "FAIL-NEW: 1").Count
$Medium = ($ScanOutput | Select-String "FAIL-NEW: 2").Count
$Low = ($ScanOutput | Select-String "FAIL-NEW: 3").Count
$Warnings = ($ScanOutput | Select-String "WARN-NEW").Count

# Create summary
$Summary = @"
# 🔒 OWASP ZAP Security Scan Report

**Target:** ``$TargetUrl``  
**Date:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")  
**ZAP Pod:** ``$ZapPod``

## 📊 Summary

| Severity | Count |
|----------|-------|
| 🔴 Critical | $Critical |
| 🟠 High | $High |
| 🟡 Medium | $Medium |
| 🟢 Low | $Low |
| ⚠️  Warnings | $Warnings |

## 📋 Scan Details

Full scan output available in: ``zap-scan-output.txt``

## 🎯 Next Steps

1. Review findings in the scan output
2. Fix critical and high severity issues
3. Update security headers in nginx.conf
4. Re-run scan to verify fixes

---

*Generated by OWASP ZAP Baseline Scanner*
"@

$Summary | Out-File -FilePath "$OutputDir\summary.md"

Write-Host "📊 Quick Summary:" -ForegroundColor Blue
Write-Host "  🔴 Critical: $Critical"
Write-Host "  🟠 High: $High"
Write-Host "  🟡 Medium: $Medium"
Write-Host "  🟢 Low: $Low"
Write-Host "  ⚠️  Warnings: $Warnings"
Write-Host ""

Write-Host "✅ Reports generated in: $OutputDir" -ForegroundColor Green
Write-Host "Files created:" -ForegroundColor Green
Write-Host "  - zap-scan-output.txt (full scan output)"
Write-Host "  - summary.md (summary report)"
Write-Host ""

# Open summary in VS Code
code "$OutputDir\summary.md"

