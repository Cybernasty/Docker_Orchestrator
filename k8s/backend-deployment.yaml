apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: backend-orchestrator
  namespace: orchestrator
spec:
  serviceName: backend-orchestrator
  replicas: 3
  selector:
    matchLabels:
      app: backend-orchestrator
  template:
    metadata:
      labels:
        app: backend-orchestrator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        fsGroup: 0
      containers:
      - name: backend
        image: cybermonta/orchestrator-backend:main-2dac670
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: PORT
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: MONGODB_URI
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: JWT_SECRET
        - name: DOCKER_HOST
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: DOCKER_HOST
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: logs
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi 

