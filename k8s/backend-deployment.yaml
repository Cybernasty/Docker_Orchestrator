apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: backend-orchestrator
  namespace: orchestrator
spec:
  serviceName: backend-orchestrator
  replicas: 3
  selector:
    matchLabels:
      app: backend-orchestrator
  template:
    metadata:
      labels:
        app: backend-orchestrator
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: localhost:6500/orchestrator-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
        - containerPort: 5443
          name: https
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: PORT
        - name: HTTPS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: HTTPS_ENABLED
        - name: HTTPS_PORT
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: HTTPS_PORT
        - name: SSL_CERT_PATH
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: SSL_CERT_PATH
        - name: SSL_KEY_PATH
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: SSL_KEY_PATH
        - name: SSL_CA_PATH
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: SSL_CA_PATH
        - name: SSL_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: SSL_PASSPHRASE
              optional: true
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: MONGODB_URI
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: JWT_SECRET
        - name: DOCKER_HOST
          valueFrom:
            configMapKeyRef:
              name: orchestrator-config
              key: DOCKER_HOST
        volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: logs
          mountPath: /app/logs
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-private
          mountPath: /etc/ssl/private
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: logs
        emptyDir: {}
      - name: ssl-certs
        secret:
          secretName: ssl-certificates
          items:
          - key: server.crt
            path: server.crt
          - key: ca.crt
            path: ca.crt
      - name: ssl-private
        secret:
          secretName: ssl-certificates
          items:
          - key: server.key
            path: server.key
  volumeClaimTemplates:
  - metadata:
      name: logs
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: backend-orchestrator
  namespace: orchestrator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: backend-orchestrator
  ports:
  - name: http
    port: 5000
    targetPort: 5000
  - name: https
    port: 5443
    targetPort: 5443
  type: ClusterIP 