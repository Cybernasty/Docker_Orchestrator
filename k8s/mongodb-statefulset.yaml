apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: orchestrator
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: MONGODB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "orchestrator"
        command:
        - mongod
        - --bind_ip_all
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /docker-entrypoint-initdb.d

        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --username
            - admin
            - --password
            - $(MONGODB_ROOT_PASSWORD)
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --username
            - admin
            - --password
            - $(MONGODB_ROOT_PASSWORD)
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-init
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: orchestrator
data:
  init-replica.js: |
    rs.initiate({
      _id: "rs0",
      members: [
        { _id: 0, host: "mongodb-0.mongodb.orchestrator.svc.cluster.local:27017" }
      ]
    });
    
    // Create user for orchestrator
    db = db.getSiblingDB('orchestrator');
    db.createUser({
      user: "orchestrator",
      pwd: "mongodb-user-password",
      roles: [
        { role: "readWrite", db: "orchestrator" },
        { role: "dbAdmin", db: "orchestrator" }
      ]
    });
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: orchestrator
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017 