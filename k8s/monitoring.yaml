# Prometheus ServiceMonitor for backend metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: orchestrator-backend-monitor
  namespace: monitoring
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: backend-orchestrator
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# Prometheus ServiceMonitor for frontend metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: orchestrator-frontend-monitor
  namespace: monitoring
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: frontend-orchestrator
  endpoints:
  - port: http
    interval: 30s
    path: /health
    scrapeTimeout: 10s
---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: orchestrator-alerts
  namespace: monitoring
  labels:
    release: prometheus
    prometheus: kube-prometheus
    role: alert-rules
spec:
  groups:
  - name: orchestrator.rules
    rules:
    - alert: BackendDown
      expr: up{job="backend-orchestrator"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Backend orchestrator is down"
        description: "Backend orchestrator has been down for more than 1 minute"
    
    - alert: FrontendDown
      expr: up{job="frontend-orchestrator"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Frontend orchestrator is down"
        description: "Frontend orchestrator has been down for more than 1 minute"
    
    - alert: HighMemoryUsage
      expr: (container_memory_usage_bytes{container="backend"} / container_spec_memory_limit_bytes{container="backend"}) > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage on backend"
        description: "Backend is using more than 80% of memory limit"
    
    - alert: HighCPUUsage
      expr: (rate(container_cpu_usage_seconds_total{container="backend"}[5m]) / container_spec_cpu_quota{container="backend"}) > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High CPU usage on backend"
        description: "Backend is using more than 80% of CPU limit"
    
    - alert: MongoDBDown
      expr: up{job="mongodb"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "MongoDB is down"
        description: "MongoDB has been down for more than 1 minute"
---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: orchestrator-dashboard
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  orchestrator-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Orchestrator Dashboard",
        "tags": ["orchestrator"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Backend Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"backend-orchestrator\"}",
                "legendFormat": "{{pod}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{container=\"backend\"} / 1024 / 1024",
                "legendFormat": "{{pod}} MB"
              }
            ]
          },
          {
            "id": 3,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{container=\"backend\"}[5m]) * 100",
                "legendFormat": "{{pod}} %"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    } 