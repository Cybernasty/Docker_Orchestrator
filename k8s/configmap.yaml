
apiVersion: v1
kind: ConfigMap
metadata:
  name: orchestrator-config
  namespace: orchestrator
data:
  # Backend Configuration
  NODE_ENV: "production"
  PORT: "5000"
  CORS_ORIGIN: "http://localhost:30080"
  
  # HTTPS Configuration
  HTTPS_ENABLED: "false"
  HTTPS_PORT: "5443"
  SSL_CERT_PATH: "/etc/ssl/certs/server.crt"
  SSL_KEY_PATH: "/etc/ssl/private/server.key"
  SSL_CA_PATH: "/etc/ssl/certs/ca.crt"
  
  # MongoDB Configuration
  MONGODB_URI: "mongodb+srv://zitounimontassar:R7XuZLoVK4QCFw0P@orchestration.pscxr.mongodb.net/containers?retryWrites=true&w=majority&appName=Orchestration"
  
  # JWT Configuration
  JWT_SECRET: "your-super-secret-jwt-key-change-this-in-production"
  JWT_EXPIRES_IN: "24h"
  
  # Docker Configuration - Remote Ubuntu Docker Daemon
  DOCKER_HOST: "tcp://192.168.11.149:2375"
  
  # Logging Configuration
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  
  # Rate Limiting
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  
  # Session Configuration
  SESSION_SECRET: "your-session-secret-change-this"
  SESSION_COOKIE_SECURE: "true"
  SESSION_COOKIE_HTTPONLY: "true"
  
  # Health Check Configuration
  HEALTH_CHECK_INTERVAL: "30000"
  HEALTH_CHECK_TIMEOUT: "5000"
  
  # Container Management
  MAX_CONTAINERS_PER_USER: "50"
  DEFAULT_CONTAINER_MEMORY: "512"
  DEFAULT_CONTAINER_CPU: "0.5"
  
  # Backup Configuration
  BACKUP_ENABLED: "true"
  BACKUP_SCHEDULE: "0 2 * * *"
  BACKUP_RETENTION_DAYS: "30"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: orchestrator
data:
  nginx.conf: |
    events {
      worker_connections 1024;
    }
    
    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      
      # Logging
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      
      access_log /var/log/nginx/access.log main;
      error_log /var/log/nginx/error.log warn;
      
      # Gzip compression
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
      
      # Rate limiting
      limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
      limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
      
      # Upstream backend servers
      upstream backend {
        least_conn;
        server backend-orchestrator-0.backend-orchestrator.orchestrator.svc.cluster.local:5000 max_fails=3 fail_timeout=30s;
        server backend-orchestrator-1.backend-orchestrator.orchestrator.svc.cluster.local:5000 max_fails=3 fail_timeout=30s;
        server backend-orchestrator-2.backend-orchestrator.orchestrator.svc.cluster.local:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
      }
      
      # Main server block
      server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' ws: wss:;";
        
        # Frontend static files
        location / {
          root /usr/share/nginx/html;
          index index.html;
          try_files $uri $uri/ /index.html;
          
          # Cache static assets
          location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
          }
        }
        
        # API proxy
        location /api/ {
          limit_req zone=api burst=20 nodelay;
          
          proxy_pass http://backend;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cache_bypass $http_upgrade;
          proxy_read_timeout 300s;
          proxy_connect_timeout 75s;
          
          # Health check
          proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        
        # Health check endpoint
        location /health {
          access_log off;
          return 200 "healthy\n";
          add_header Content-Type text/plain;
        }
        
        # Metrics endpoint
        location /metrics {
          limit_req zone=api burst=10 nodelay;
          proxy_pass http://backend;
        }
      }
    } 